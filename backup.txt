package main;
import java.util.*;


public class Program {

	static LinkedHashMap<Integer, Boolean> nums = new LinkedHashMap<Integer, Boolean>();	
	static int maxPrime = 100_000_000;
	static int maxRoot = (int)Math.sqrt(maxPrime);
	static int prevKey = 2;
	static int sampleSize = 25;
	static int warmupBuffer = 10;
	static void populateNums() {
		nums.put(2, true);
		for (int i = 3; i < maxPrime; i+=2) {
			nums.put(i, true);
		}
	}
	
	static void findNextKey() {
		for (Map.Entry<Integer, Boolean> set : nums.entrySet()) {
			if (set.getKey() > prevKey) {
				prevKey = set.getKey();
				break;
			}
		}
		
	}
	
	static void checkMults() {
		for (int i = 2; i <= maxPrime / prevKey; i++) {
			if (nums.containsKey(i * prevKey)) nums.remove(i * prevKey);
		}
	}
	
	static long findPrimes() {
		long startTime = System.currentTimeMillis();
		nums.clear();
		populateNums();
		
		while (prevKey < maxRoot) {
			findNextKey();
			checkMults();
		}
		long endTime = System.currentTimeMillis();
		return endTime - startTime;
	}
	
	static void printAverage(ArrayList<Long> times) {
		long total = 0;
		for (long time : times) {
			total += time;
		}
		long average = total / times.size();
		long minutes = (average/1000) / 60;
		long seconds = (average/1000) % 60;
		System.out.println("Average time: " + minutes + " Minutes and " + seconds + " Seconds");
	}
	
	
	public static void main(String[] args) {
		ArrayList<Long> times = new ArrayList<Long>();
		for (int i = 0; i < sampleSize + warmupBuffer; i++) {
			if (i >= warmupBuffer)  {
				times.add(findPrimes());
				System.out.println(i + 1 - warmupBuffer);
			}
		}
		
		printAverage(times);
	}

}
